using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using BuildingAppDashboard.utils;
using BuildingAppDashboard.dal;
using System.Data;
using System.Reflection;
using System.Globalization;

namespace BuildingAppDashboard.presentation
{
    public partial class SurveyResult : BasePage
    {
        public DashboardDalDataContext Dc { get; set; }
        protected void Page_Load(object sender, EventArgs e)
        {
            if (HttpContext.Current.Session["name"] == null)
            {
                HttpContext.Current.Session.Abandon();
                HttpContext.Current.Response.Redirect("http://fmportal/portal");
            }
            Dc = new DashboardDalDataContext();
            SetCulture("en-US");


            if (Session["Culture"] == null)
            {
                Session["Culture"] = CultureHelper.GetCurrentCulture() == "en-US" ? "ar-AE" : "en-US";
            }

            Draw();
        }
        protected void searchByDate(object sender, EventArgs e)
        {
            //Draw();
        }
        private void Draw()
        {
            try
            {
             

                List<SurveryAvgResult> result = new List<SurveryAvgResult>();

                List<SurveryResult> data = new List<SurveryResult>();

                List<ServiceSAvgResult> beforeSubmitresult = new List<ServiceSAvgResult>();

                List<ServiceSResult> beforeSubmitdata = new List<ServiceSResult>();

                List<WebsiteSurvey> websiteResult = new List<WebsiteSurvey>();

                List<ServiceSResult> websiteData = new List<ServiceSResult>();


                dataRow.InnerHtml = "";


                // survey results before request submission
                // Code Starts Here

                if (!string.IsNullOrEmpty(from.Text) && !string.IsNullOrEmpty(to.Text))
                {
                    DateTime fromDate = DateTime.ParseExact(from.Text, "MM/dd/yyyy", CultureInfo.InvariantCulture);

                    DateTime toDate = DateTime.ParseExact(to.Text, "MM/dd/yyyy", CultureInfo.InvariantCulture).AddDays(1);
                    beforeSubmitresult = Dc.ExecuteQuery<ServiceSAvgResult>($@"select SurveyDate, SurveyCount,VHappy,Happy,Neutral,Sad,Angry,SurveyType from Service_S_Avg_Result 
                                                                where SurveyDate >= '{fromDate}' and SurveyDate < '{toDate}' and Active = 1").ToList();
                    beforeSubmitdata = Dc.ExecuteQuery<ServiceSResult>($@"select SurveyType, SUM(SurveyCount) as SurveyCount,CONVERT(DECIMAL(10,2),SUM(VHappy)/count(*)) as VHappy,
                                                                CONVERT(DECIMAL(10,2),SUM(Happy)/count(*)) as Happy ,
                                                                CONVERT(DECIMAL(10,2),SUM(Neutral)/count(*)) as Neutral,
                                                                CONVERT(DECIMAL(10,2),SUM(Sad)/count(*)) as Sad,
                                                                CONVERT(DECIMAL(10,2),SUM(Angry)/count(*)) as Angry,
                                                                count(*) as TotalRecords
                                                                from Service_S_Avg_Result  
                                                                where SurveyDate >= '{fromDate}' and SurveyDate < '{toDate}' and Active = 1
                                                                group by SurveyType").ToList();

                }
                else
                {
                    beforeSubmitresult = Dc.ExecuteQuery<ServiceSAvgResult>($@"select SurveyDate, SurveyCount,VHappy,Happy,Neutral,Sad,Angry,SurveyType from Service_S_Avg_Result 
                                                                where SurveyDate >= DATEADD(dd,-1,CAST(GETDATE() AS DATE)) and SurveyDate < CAST(GETDATE() AS DATE) and Active = 1").ToList();
                    beforeSubmitdata = Dc.ExecuteQuery<ServiceSResult>($@"select SurveyType, SUM(SurveyCount) as SurveyCount,CONVERT(DECIMAL(10,2),SUM(VHappy)/count(*)) as VHappy,
                                                                CONVERT(DECIMAL(10,2),SUM(Happy)/count(*)) as Happy ,
                                                                CONVERT(DECIMAL(10,2),SUM(Neutral)/count(*)) as Neutral,
                                                                CONVERT(DECIMAL(10,2),SUM(Sad)/count(*)) as Sad,
                                                                CONVERT(DECIMAL(10,2),SUM(Angry)/count(*)) as Angry,
                                                                count(*) as TotalRecords
                                                                from Service_S_Avg_Result  
                                                                where SurveyDate >= DATEADD(dd,-1,CAST(GETDATE() AS DATE)) and SurveyDate < CAST(GETDATE() AS DATE)  and Active = 1
                                                                group by SurveyType").ToList();
                }


                var before_html = "";
                foreach (var item in beforeSubmitdata)
                {
                    before_html += " <div class='row' style='text-align:center'>";
                    before_html += " <h2 style='background: black; color: #ffffff !important;padding: 10px;'>Survey Results Before Request Submission</h2>";
                    before_html += " <div class='col-md-12 col-lg-12'>";
                    before_html += item.SurveyType == "ES" ? "<h1>Eservice Survey Result</h1>" : ((item.SurveyType == "WS") ? " <h1>Website Survey Result</h1>" : " <h1>Employees Portal Survey Result</h1>");
                    before_html += "<div class='row'><div class='col-md-1 col-lg-1'></div><div class='col-md-2 col-lg-2' style='text-align:center'>";
                    before_html += "<img src='../img/customer_rating/very_happy.png' style='width:150px;'><br/>";
                    before_html += "<h2>" + item.VHappy + "%</h2>";
                    before_html += " </div>";
                    before_html += " <div class='col-md-2 col-lg-2' style='text-align:center'>";
                    before_html += "<img src='../img/customer_rating/happy.png' style='width:150px;'><br/>";
                    before_html += "<h2>" + item.Happy + "%</h2>";
                    before_html += " </div>";
                    before_html += " <div class='col-md-2 col-lg-2' style='text-align:center'>";
                    before_html += "<img src='../img/customer_rating/neutral.png' style='width:150px;'><br/>";
                    before_html += "<h2>" + item.Neutral + "%</h2>";
                    before_html += " </div>";
                    before_html += " <div class='col-md-2 col-lg-2' style='text-align:center'>";
                    before_html += "<img src='../img/customer_rating/sad.png' style='width:150px;'><br/>";
                    before_html += "<h2>" + item.Sad + "%</h2>";
                    before_html += " </div>";
                    before_html += " <div class='col-md-2 col-lg-2' style='text-align:center'>";
                    before_html += "<img src='../img/customer_rating/angry.png' style='width:150px;'><br/>";
                    before_html += "<h2>" + item.Angry + "%</h2>";
                    before_html += " </div></div><div class='col-md-1 col-lg-1'></div><div class='row'>";
                    var tableData = beforeSubmitresult.Where(x => x.SurveyType == item.SurveyType).ToList();
                    before_html += ConvertDataTableToHTML(ToDataTable(tableData));
                    before_html += " </div></div></div>";

                    // DataTable table = ToDataTable(tableData);
                    // var testtt = "";
                }
                dataRow.InnerHtml += before_html;





                // survey results before request submission
                // code End Here


                // Website Survey Before Submission
                // Code Starts Here

                if (!string.IsNullOrEmpty(from.Text) && !string.IsNullOrEmpty(to.Text))
                {
                    DateTime fromDate = DateTime.ParseExact(from.Text, "MM/dd/yyyy", CultureInfo.InvariantCulture);

                    DateTime toDate = DateTime.ParseExact(to.Text, "MM/dd/yyyy", CultureInfo.InvariantCulture).AddDays(1);
                    websiteResult = Dc.ExecuteQuery<WebsiteSurvey>($@"select * from Survey_WS_results sw
                                                                    join Survey_WS_Q_answers sqa on sw.Id = sqa.QId
                                                                    where QuestionId != 334777 and SurveyDate >= '{fromDate}' and SurveyDate < '{toDate}' and Active = 1").ToList();
                    websiteData = Dc.ExecuteQuery<ServiceSResult>($@"select SurveyType, SUM(SurveyCount) as SurveyCount,
                                                                        CONVERT(DECIMAL(10,2),SUM(Happy)/count(*)) as Happy ,
                                                                        CONVERT(DECIMAL(10,2),SUM(Neutral)/count(*)) as Neutral,
                                                                        CONVERT(DECIMAL(10,2),SUM(Sad)/count(*)) as Sad,
                                                                        count(*) as TotalRecords
                                                                        from Survey_WS_results sw  
                                                                        join Survey_WS_Q_answers sqa on sw.Id = sqa.QId
                                                                        where QuestionId != 334777 AND SurveyDate >= '{fromDate}' and SurveyDate < '{toDate}' and Active = 1
                                                                        group by SurveyType").ToList();

                }
                else
                {
                    websiteResult = Dc.ExecuteQuery<WebsiteSurvey>($@"select * from Survey_WS_results sw
                                                                    join Survey_WS_Q_answers sqa on sw.Id = sqa.QId
                                                                    where QuestionId != 334777 and SurveyDate >= DATEADD(dd,-1,CAST(GETDATE() AS DATE)) and SurveyDate < CAST(GETDATE() AS DATE) and Active = 1").ToList();
                    websiteData = Dc.ExecuteQuery<ServiceSResult>($@"select SurveyType, SUM(SurveyCount) as SurveyCount,
                                                                        CONVERT(DECIMAL(10,2),SUM(Happy)/count(*)) as Happy ,
                                                                        CONVERT(DECIMAL(10,2),SUM(Neutral)/count(*)) as Neutral,
                                                                        CONVERT(DECIMAL(10,2),SUM(Sad)/count(*)) as Sad,
                                                                        count(*) as TotalRecords
                                                                        from Survey_WS_results sw  
                                                                        join Survey_WS_Q_answers sqa on sw.Id = sqa.QId
                                                                        where QuestionId != 334777 and SurveyDate >= DATEADD(dd,-1,CAST(GETDATE() AS DATE)) and SurveyDate < CAST(GETDATE() AS DATE)  and Active = 1
                                                                        group by SurveyType").ToList();
                }


                var websitehtml = "";
                foreach (var item in websiteData)
                {
                    websitehtml += " <div class='row' style='text-align:center'>";
                    websitehtml += " <div class='col-md-12 col-lg-12'>";
                    websitehtml += " <h1>Website Survey Result</h1>";
                    websitehtml += "<div class='row'><div class='col-md-4 col-lg-4' style='text-align:center'>";
                    websitehtml += "<img src='../img/happy.png' style='width:150px;'><br/>";
                    websitehtml += "<h2>" + item.Happy + "%</h2>";
                    websitehtml += " </div>";
                    websitehtml += " <div class='col-md-4 col-lg-4' style='text-align:center'>";
                    websitehtml += "<img src='../img/neutral.png' style='width:150px;'><br/>";
                    websitehtml += "<h2>" + item.Neutral + "%</h2>";
                    websitehtml += " </div>";
                    websitehtml += " <div class='col-md-4 col-lg-4' style='text-align:center'>";
                    websitehtml += "<img src='../img/sad.png' style='width:150px;'><br/>";
                    websitehtml += "<h2>" + item.Sad + "%</h2>";
                    websitehtml += " </div></div><div class='row'>";
                    var tableData = websiteResult.Where(x => x.SurveyType == item.SurveyType).ToList();
                    websitehtml += ConvertDataTableToHTML(ToDataTable(tableData));
                    websitehtml += " </div></div></div>";

                    // DataTable table = ToDataTable(tableData);
                    // var testtt = "";
                }
                dataRow.InnerHtml += websitehtml;


                // Website Survey Before Submission
                // code End Here
                dataRow.InnerHtml += "<hr style='border-bottom: 4px solid #000000;'>";


                if (!string.IsNullOrEmpty(from.Text) && !string.IsNullOrEmpty(to.Text))
                {
                    DateTime fromDate = DateTime.ParseExact(from.Text, "MM/dd/yyyy", CultureInfo.InvariantCulture);

                    DateTime toDate = DateTime.ParseExact(to.Text, "MM/dd/yyyy", CultureInfo.InvariantCulture).AddDays(1);
                    result = Dc.ExecuteQuery<SurveryAvgResult>($@"select SurveyDate, SurveyCount,Happy,Neutral,Sad,SurveyType from SurveyAvgResults 
                                                                where SurveyDate >= '{fromDate}' and SurveyDate < '{toDate}' and Active = 1").ToList();
                     data = Dc.ExecuteQuery<SurveryResult>($@"select SurveyType, SUM(SurveyCount) as SurveyCount, CONVERT(DECIMAL(10,2),SUM(Happy)/count(*)) as Happy ,
                                                                  CONVERT(DECIMAL(10,2),SUM(Neutral)/count(*)) as Neutral,
                                                                  CONVERT(DECIMAL(10,2),SUM(Sad)/count(*)) as Sad,count(*) as TotalRecords
                                                                  from SurveyAvgResults 
                                                                  where SurveyDate >= '{fromDate}' and SurveyDate < '{toDate}' and Active = 1 and SurveyType != 'WS'
                                                                  group by SurveyType").ToList();

                }
                else
                {
                    result = Dc.ExecuteQuery<SurveryAvgResult>($@"select SurveyDate, SurveyCount,Happy,Neutral,Sad,SurveyType from SurveyAvgResults 
                                                                where SurveyDate >= DATEADD(dd,-1,CAST(GETDATE() AS DATE)) and SurveyDate < CAST(GETDATE() AS DATE) and Active = 1").ToList();
                    data = Dc.ExecuteQuery<SurveryResult>($@"select SurveyType, SUM(SurveyCount) as SurveyCount, CONVERT(DECIMAL(10,2),SUM(Happy)/count(*)) as Happy ,
                                                                  CONVERT(DECIMAL(10,2),SUM(Neutral)/count(*)) as Neutral,
                                                                  CONVERT(DECIMAL(10,2),SUM(Sad)/count(*)) as Sad,count(*) as TotalRecords
                                                                  from SurveyAvgResults 
                                                                  where SurveyDate >= DATEADD(dd,-1,CAST(GETDATE() AS DATE)) and SurveyDate < CAST(GETDATE() AS DATE)  and Active = 1 and SurveyType != 'WS'
                                                                  group by SurveyType").ToList();
                }

                var html = "";
                html += " <h2 style='background: black; color: #ffffff !important;text-align:center;padding: 10px;'>Survey Results After Request Submission</h2>";
                foreach (var item in data)
                {
                    html += " <div class='row' style='text-align:center;'>";
                    
                    html += " <div class='col-md-12 col-lg-12'>";
                    html += item.SurveyType == "ES" ? "<h1>Eservice Survey Result</h1>" : " <h1>Employees Portal Survey Result</h1>";
                    html += "<div class='row'><div class='col-md-4 col-lg-4' style='text-align:center'>";
                    html += "<img src='../img/happy.png' style='width:150px;'><br/>";
                    html += "<h2>" + item.Happy + "%</h2>";
                    html += " </div>";
                    html += " <div class='col-md-4 col-lg-4' style='text-align:center'>";
                    html += "<img src='../img/neutral.png' style='width:150px;'><br/>";
                    html += "<h2>" + item.Neutral + "%</h2>";
                    html += " </div>";
                    html += " <div class='col-md-4 col-lg-4' style='text-align:center'>";
                    html += "<img src='../img/sad.png' style='width:150px;'><br/>";
                    html += "<h2>" + item.Sad + "%</h2>";
                    html += " </div></div><div class='row'>";
                    var tableData = result.Where(x => x.SurveyType == item.SurveyType).ToList();
                    html += ConvertDataTableToHTML(ToDataTable(tableData));
                    html += " </div></div></div>";
                   
                   // DataTable table = ToDataTable(tableData);
                   // var testtt = "";
                }
                dataRow.InnerHtml += html;


            }
            catch (Exception ex)
            {

                throw;
            }
        }

        public static string ConvertDataTableToHTML(DataTable dt)
        {
            string html = "<table class='content-table'>";
            // add header row
            html += "<thead><tr>";
            for (int i = 0; i < dt.Columns.Count; i++)
                html += "<td>" + dt.Columns[i].ColumnName + "</td>";
            html += "</tr></thead><tbody>";

            // calculate totals
            int totalSurveyCount = 0;
            decimal totalVHappyPercentage = 0;
            decimal totalHappyPercentage = 0;
            decimal totalNeutralPercentage = 0;
            decimal totalSadPercentage = 0;
            decimal totalAngryPercentage = 0;

            for (int i = 0; i < dt.Rows.Count; i++)
            {
                int surveyCount = int.Parse(dt.Rows[i]["SurveyCount"].ToString());
                totalSurveyCount += surveyCount;

                totalHappyPercentage += (decimal.Parse(dt.Rows[i]["Happy"].ToString()) * surveyCount) / 100;
                totalNeutralPercentage += (decimal.Parse(dt.Rows[i]["Neutral"].ToString()) * surveyCount) / 100;
                totalSadPercentage += (decimal.Parse(dt.Rows[i]["Sad"].ToString()) * surveyCount) / 100;


                if (dt.Columns.Contains("VHappy"))
                {
                    totalVHappyPercentage += (decimal.Parse(dt.Rows[i]["VHappy"].ToString()) * surveyCount) / 100;
                }
                if (dt.Columns.Contains("Angry"))
                {
                    totalAngryPercentage += (decimal.Parse(dt.Rows[i]["Angry"].ToString()) * surveyCount) / 100;
                }

                // add rows
                html += "<tr>";
                for (int j = 0; j < dt.Columns.Count; j++)
                    html += "<td>" + dt.Rows[i][j].ToString() + "</td>";
                html += "</tr>";
            }

 
            // rounding average to Non-Deicmal
            int happyCount = (int)Math.Round(totalHappyPercentage, MidpointRounding.AwayFromZero);
            int neutralCount = (int)Math.Round(totalNeutralPercentage, MidpointRounding.AwayFromZero);
            int sadCount = (int)Math.Round(totalSadPercentage, MidpointRounding.AwayFromZero);
            int vhappycount = 0;
            int angrycount = 0;
            if (dt.Columns.Contains("VHappy"))
            {
                vhappycount = (int)Math.Round(totalVHappyPercentage, MidpointRounding.AwayFromZero);
            }
            if (dt.Columns.Contains("Angry"))
            {
                angrycount = (int)Math.Round(totalAngryPercentage, MidpointRounding.AwayFromZero);
            }

            // add total row
            html += "<tr style=' background: #86ffd2;'><td>Total</td>";
            html += "<td>" + totalSurveyCount + "</td>";
            if (dt.Columns.Contains("VHappy"))
            {
                html += "<td>" + vhappycount + "</td>";
            }
            html += "<td>" + happyCount.ToString() + "</td>";
            html += "<td>" + neutralCount.ToString() + "</td>";
            html += "<td>" + sadCount.ToString() + "</td>";
            if (dt.Columns.Contains("Angry"))
            {
                html += "<td>" + angrycount + "</td>";
            }
            html += "<td></td>"; // empty cell for SurveyType
            html += "</tr>";

            html += "</tbody></table>";
            return html;
        }

        public DataTable ToDataTable<T>(List<T> items)
        {
            DataTable dataTable = new DataTable(typeof(T).Name);
            //Get all the properties
            PropertyInfo[] Props = typeof(T).GetProperties(BindingFlags.Public | BindingFlags.Instance);
            foreach (PropertyInfo prop in Props)
            {
                //Setting column names as Property names
                dataTable.Columns.Add(prop.Name);
            }
            foreach (T item in items)
            {
                var values = new object[Props.Length];
                for (int i = 0; i < Props.Length; i++)
                {
                    //inserting property values to datatable rows
                    values[i] = Props[i].GetValue(item, null);
                }
                dataTable.Rows.Add(values);
            }
            //put a breakpoint here and check datatable
            return dataTable;
        }
        public class SurveryResult
        {
            public string SurveyType { get; set; }
            public int SurveyCount { get; set; }
            public decimal Happy { get; set; }
            public decimal Neutral { get; set; }
            public decimal Sad { get; set; }
            public int TotalRecords { get; set; }
        }

        public class SurveryAvgResult
        {
            public DateTime SurveyDate { get; set; }
            public int SurveyCount { get; set; }
            public decimal Happy { get; set; }
            public decimal Neutral { get; set; }
            public decimal Sad { get; set; }
            public string SurveyType { get; set; }
        }

        public class ServiceSAvgResult
        {
            public DateTime SurveyDate { get; set; }
            public int SurveyCount { get; set; }
            public decimal VHappy { get; set; }
            public decimal Happy { get; set; }
            public decimal Neutral { get; set; }
            public decimal Sad { get; set; }
            public decimal Angry { get; set; }
            public string SurveyType { get; set; }
        }
        public class ServiceSResult
        {
            public string SurveyType { get; set; }
            public int SurveyCount { get; set; }
            public decimal VHappy { get; set; }
            public decimal Happy { get; set; }
            public decimal Neutral { get; set; }
            public decimal Sad { get; set; }
            public decimal Angry { get; set; }
            public int TotalRecords { get; set; }
        }
        public class WebsiteSurvey
        {
            public DateTime SurveyDate { get; set; }
            public int SurveyCount { get; set; }
            
            public decimal Happy { get; set; }
            public decimal Neutral { get; set; }
            public decimal Sad { get; set; }
            public string Question { get; set; }
            public string SurveyType { get; set; }
        }

    }
}
